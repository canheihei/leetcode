// 创建一个新的二叉树节点
struct TreeNode* creatTreeNode(int val) {
    struct TreeNode* newnode=(struct TreeNode*)malloc(sizeof(struct TreeNode));
    newnode->val=val;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}

// 克隆一棵二叉树
struct TreeNode* cloneTree(struct TreeNode* root) {
    if(root==NULL) {
        return NULL;
    } else {
        struct TreeNode* clone=creatTreeNode(root->val);
        clone->left=cloneTree(root->left);
        clone->right=cloneTree(root->right);       
        return clone;
    }
}

// 翻转一棵二叉树
struct TreeNode* invertTree(struct TreeNode* root) {
    if(root==NULL) {
        return NULL;
    } else {
        struct TreeNode* temp=root->left;
        root->left=root->right;
        root->right=temp;
        invertTree(root->left);
        invertTree(root->right);
        return root;
    }
}

// 判断两棵二叉树是否相同
bool isSameTree(struct TreeNode* p, struct TreeNode* q) {
    if(p==NULL && q==NULL) {
        return true;
    }
    if(p!=NULL && q==NULL) {
        return false;
    }
    if(p==NULL && q!=NULL) {
        return false;
    }
    if(p->val!=q->val) {
        return false;
    }
    return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
}

bool isSymmetric(struct TreeNode* root){
    if(root == NULL) {
        return true;
    } 
    struct TreeNode* root_clone = cloneTree(root); // 克隆原始二叉树
    struct TreeNode* root_invert = invertTree(root); // 翻转原始二叉树
    return isSameTree(root_clone, root_invert); // 判断克隆二叉树和翻转二叉树是否相同
}
