struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    int len1 = ListLength(l1);
    int len2 = ListLength(l2);
    if (len1 < len2) {
        struct ListNode* tmp = l1;
        l1 = l2;
        l2 = tmp;
        int len = len1;
        len1 = len2;
        len2 = len;
    }

    // 对l1、l2分别进行逆序处理
    ListInverse(l1);
    ListInverse(l2);
    
    struct ListNode* ans = (struct ListNode*)malloc(sizeof(struct ListNode)*(len1 > len2 ? (len1 + 1) : (len2 + 1)));
    struct ListNode* pl1 = l1;
    struct ListNode* pl2 = l2;
    struct ListNode* pans = ans;
    int carry = 0; // 进位
    while(pl1 && pl2)
    {
        int sum = pl1->val + pl2->val + carry;
        carry = sum / 10;
        sum %= 10;
        pans->val = sum;
        pans->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        pans = pans->next;
        pl1 = pl1->next;
        pl2 = pl2->next;
    }
    while(pl1)
    {
        int sum = pl1->val + carry;
        carry = sum / 10;
        sum %= 10;
        pans->val = sum;
        pans->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        pans = pans->next;
        pl1 = pl1->next;
    }
    while(pl2)
    {
        int sum = pl2->val + carry;
        carry = sum / 10;
        sum %= 10;
        pans->val = sum;
        pans->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        pans = pans->next;
        pl2 = pl2->next;
    }
    if(carry)
    {
        pans->val = carry;
        pans->next = NULL;
    }
    else
    {
        pans = NULL;
    }

    // 将结果链表再次逆序处理，并去掉前导0
    ListInverse(ans);
    struct ListNode* p = ans;
    while(p && p->val == 0)
    {
        ans = ans->next;
        free(p);
        p = ans;
    }

    return ans;
}
